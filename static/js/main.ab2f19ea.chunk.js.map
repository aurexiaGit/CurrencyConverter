{"version":3,"sources":["Component/CurrencyConverter.js","App.js","reportWebVitals.js","index.js"],"names":["CurrencyConverter","state","override","trueRate","fxRate","baseCurrency","convertToCurrency","baseAmount","result","history","changeBaseCurrency","bind","changeConvertToCurrency","changeBaseAmount","changeRate","addHistory","getConvertedCurrency","switchCurrencies","min","max","Math","random","amount","this","push","Number","parseFloat","toFixed","length","interval","setInterval","setState","generateRandomNumber","abs","e","target","value","rate","Container","Row","style","color","Col","Card","className","body","InputGroup","size","Prepend","Text","FormControl","readOnly","onChange","required","Append","backgroundColor","Button","onClick","variant","Table","responsive","striped","bordered","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab2f19ea.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nexport default class CurrencyConverter extends React.Component {\r\n  constructor() {\r\n    super();\r\n    \r\n    this.state = {\r\n      override: false,\r\n      trueRate: 1.1,\r\n      fxRate: 0,\r\n      baseCurrency:'EUR',\r\n      convertToCurrency:'USD',\r\n      baseAmount: 0,\r\n      result: 0,\r\n      history:[]\r\n    };\r\n    \r\n    this.changeBaseCurrency = this.changeBaseCurrency.bind(this);\r\n    this.changeConvertToCurrency = this.changeConvertToCurrency.bind(this);\r\n    this.changeBaseAmount = this.changeBaseAmount.bind(this);\r\n    this.changeRate = this.changeRate.bind(this);\r\n    this.addHistory = this.addHistory.bind(this);\r\n    this.getConvertedCurrency = this.getConvertedCurrency.bind(this);\r\n    this.switchCurrencies = this.switchCurrencies.bind(this);\r\n  }\r\n\r\n  generateRandomNumber(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n  }\r\n\r\n  addHistory(amount){\r\n    this.state.history.push(\r\n      <tr key={this.state.history.length}>\r\n        <td>{Number.parseFloat(this.state.trueRate).toFixed(3)}</td>\r\n        <td>{Number.parseFloat((this.state.override ? this.state.fxRate : this.state.trueRate)).toFixed(3)}</td>\r\n        <td>{this.state.baseAmount} {this.state.baseCurrency}</td>\r\n        <td>{amount} {this.state.convertToCurrency}</td>\r\n      </tr>\r\n    )\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.setState({ \r\n        trueRate: this.state.trueRate +  this.generateRandomNumber(-0.05,0.05),\r\n        override: (Math.abs(this.state.fxRate - this.state.trueRate) < this.state.trueRate * 0.02)\r\n      });\r\n    }, 3000);\r\n  }\r\n  \r\n  changeBaseCurrency(e) {\r\n    this.setState({ baseCurrency: e.target.value});\r\n  }    \r\n  \r\n  changeConvertToCurrency(e) {\r\n    this.setState({\r\n      convertToCurrency: e.target.value\r\n    });\r\n  }\r\n  \r\n  changeBaseAmount(e) {\r\n    this.setState({\r\n      baseAmount: e.target.value\r\n    });\r\n  }\r\n\r\n  changeRate(e){\r\n    this.setState({\r\n      fxRate : e.target.value,\r\n      override: (Math.abs(this.state.fxRate - this.state.trueRate) < this.state.trueRate * 0.02)\r\n    })\r\n  }\r\n  \r\n  getConvertedCurrency() {\r\n    let rate = (this.state.override ? this.state.fxRate : this.state.trueRate)\r\n    let amount = Number.parseFloat((this.state.baseCurrency === \"USD\") ? this.state.baseAmount * rate : this.state.baseAmount / rate).toFixed(3)\r\n    this.setState({\r\n      result : amount \r\n    })\r\n    this.addHistory( amount)\r\n  }\r\n\r\n  switchCurrencies(e) {\r\n    this.setState({\r\n      baseAmount : this.state.result,\r\n      result:this.state.baseAmount,\r\n      baseCurrency : this.state.convertToCurrency,\r\n      convertToCurrency : this.state.baseCurrency\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    const {trueRate,fxRate,baseCurrency,convertToCurrency,baseAmount, override, history, result} = this.state;\r\n\r\n    return(\r\n      <Container>\r\n        <Row>\r\n          <h1 style={{color:\"#2d7962\"}}>Currency Converter</h1>\r\n        </Row>\r\n        <br/>\r\n        <Row>\r\n          <Col>\r\n            <Card className=\"text-center\" body>\r\n              <Row>\r\n                <Col>\r\n                  <InputGroup size=\"sm\" className=\"mb-3\">\r\n                    <InputGroup.Prepend>\r\n                      <InputGroup.Text>fx rate:</InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl\r\n                      value={Number.parseFloat(trueRate).toFixed(3)}\r\n                      readOnly/>\r\n                  </InputGroup>\r\n                </Col>\r\n                <Col>\r\n                  <InputGroup size=\"sm\" className=\"mb-3\">\r\n                    <InputGroup.Prepend>\r\n                      <InputGroup.Text>Override fx rate:</InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl\r\n                      value={fxRate}\r\n                      onChange={this.changeRate} required/>\r\n                    <InputGroup.Append>\r\n                      <InputGroup.Text style={(override)? {backgroundColor: \"#2d7962\", color:\"white\"} : {}}>{(override ? \"Activated\" : \"Deactivated\" )}</InputGroup.Text>\r\n                    </InputGroup.Append>\r\n                  </InputGroup>\r\n                </Col>\r\n              </Row>\r\n              <br/>\r\n              <Row className=\"ml-1\">\r\n                <h3>Convert from: {baseCurrency} to {convertToCurrency}</h3>\r\n              </Row>\r\n              <br/>\r\n              <Row>\r\n                <Col>\r\n                  <InputGroup size=\"sm\" className=\"mb-3\">\r\n                    <FormControl\r\n                      value={baseAmount}\r\n                      onChange={this.changeBaseAmount} required/>\r\n                    <InputGroup.Append>\r\n                      <InputGroup.Text>{baseCurrency}</InputGroup.Text>\r\n                    </InputGroup.Append>\r\n                  </InputGroup>\r\n                </Col>\r\n                <Col>\r\n                  <Button onClick={this.switchCurrencies} variant=\"secondary\" >Switch</Button>\r\n                </Col>\r\n                <Col>\r\n                  <InputGroup size=\"sm\" className=\"mb-3\">\r\n                    <FormControl\r\n                      value={result}\r\n                      readOnly/>\r\n                    <InputGroup.Append>\r\n                      <InputGroup.Text>{convertToCurrency}</InputGroup.Text>\r\n                    </InputGroup.Append>\r\n                  </InputGroup>\r\n                </Col>\r\n              </Row>\r\n              <br/>\r\n              <Row className=\"ml-1\">\r\n                <Button variant=\"success\" onClick={this.getConvertedCurrency}>Convert</Button>\r\n              </Row>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <br/>\r\n        <Row><h2>History</h2></Row>\r\n        <br/>\r\n        <Row>\r\n          <Table size=\"sm\" responsive striped bordered>\r\n            <thead>\r\n              <tr>\r\n                <td>Real time fx Rate</td>\r\n                <td>Overrided Rate</td>\r\n                <td>Base Amount</td>\r\n                <td>Converted Amount</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {history}\r\n            </tbody>\r\n          </Table>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}","import 'bootstrap/dist/css/bootstrap.min.css';\nimport CurrencyConverter from './Component/CurrencyConverter';\n\nfunction App() {\n  return (\n    <div>\n      <CurrencyConverter/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}